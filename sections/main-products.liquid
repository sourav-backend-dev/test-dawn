<style>
  .added-to-cart {
  text-align: center;
  font-size: 12px;
  margin-top: 10px;
}
</style>
<div class="my-5 display-4 text-center">NEXT PAGE CART</div>
{% assign selectedVariant = product.first_or_selected_variant %}

<div class="product-page">
  <div class="container">
        <div class="row">
      {% for block in section.blocks %}  
      {%- assign product = all_products[block.settings.product] -%}
          <div class="col-md-3">
            <div class="card" style="width: 18rem;">
            <img src="{{ product.featured_image | img_url: 'master' }}">
    
          <div class="card-body">
            <div class="card-title"><h2>{{ product.title }}</h2></div>
            <p class="card-text">{{ selectedVariant.price | money }}</p>
    
            {% form 'product', product %}
              <label class="product-option">Options</label>
              <select class="product-select" name="id">
                {% for variant in product.variants %}
                  <option
                    {% if selectedVariant.id == variant.id %}
                      selected
                    {% endif %}
                    value="{{ variant.id }}"
                  >
                    {{ variant.title }}
                  </option>
                {% endfor %}
              </select>
    
              <div class="product-quantity">
                <label for="quantity">Quantity</label>
                <input name="quantity" id="quantity" value="1">
              </div>
              <button class="button product-add" type="submit">Add to cart</button>
            {% endform %}
          </div>
          </div>
          </div>
      {% endfor %}
    </div>
  </div>
</div>
<script>
  function openCartDrawer() {
  document.querySelector(".cart-drawer").classList.add("cart-drawer--active");
}

function closeCartDrawer() {
  document
    .querySelector(".cart-drawer")
    .classList.remove("cart-drawer--active");
}

function updateCartItemCounts(count) {
  document.querySelectorAll(".cart-count").forEach((el) => {
    el.textContent = count;
  });
}

async function updateCartDrawer() {
  const res = await fetch("/?section_id=cart-drawer");
  const text = await res.text();
  const html = document.createElement("div");
  html.innerHTML = text;

  const newBox = html.querySelector(".cart-drawer").innerHTML;

  document.querySelector(".cart-drawer").innerHTML = newBox;

  addCartDrawerListeners();
}

function addCartDrawerListeners() {
  // Update quantities
  document
    .querySelectorAll(".cart-drawer-quantity-selector button")
    .forEach((button) => {
      button.addEventListener("click", async () => {
        // Get line item key
        const rootItem =
          button.parentElement.parentElement.parentElement.parentElement
            .parentElement;
        const key = rootItem.getAttribute("data-line-item-key");

        // Get new quantity
        const currentQuantity = Number(
          button.parentElement.querySelector("input").value
        );
        const isUp = button.classList.contains(
          "cart-drawer-quantity-selector-plus"
        );
        const newQuantity = isUp ? currentQuantity + 1 : currentQuantity - 1;

        // Ajax update\
        const res = await fetch("/cart/update.js", {
          method: "post",
          headers: {
            Accept: "application/json",
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ updates: { [key]: newQuantity } }),
        });
        const cart = await res.json();

        updateCartItemCounts(cart.item_count);

        // Update cart
        updateCartDrawer();
      });
    });

  document.querySelector(".cart-drawer-box").addEventListener("click", (e) => {
    e.stopPropagation();
  });

  document
    .querySelectorAll(".cart-drawer-header-right-close, .cart-drawer")
    .forEach((el) => {
      el.addEventListener("click", () => {
        console.log("closing drawer");
        closeCartDrawer();
      });
    });
}

addCartDrawerListeners();

document.querySelectorAll('form[action="/cart/add"]').forEach((form) => {
  form.addEventListener("submit", async (e) => {
    e.preventDefault();

    // Submit form with ajax
    await fetch("/cart/add", {
      method: "post",
      body: new FormData(form),
    });

    // Get cart count
    const res = await fetch("/cart.js");
    const cart = await res.json();
    updateCartItemCounts(cart.item_count);

    // Update cart
    await updateCartDrawer();

    // Open cart drawer
    openCartDrawer();
  });
});

document.querySelectorAll('a[href="/cart"]').forEach((a) => {
  a.addEventListener("click", (e) => {
    e.preventDefault();
    openCartDrawer();
  });
});
</script>
{% schema %}
{
  "name": "Main product",
  "settings": [],
  "blocks": [
      {
        "type": "product",
        "name": "product",
        "settings": [
          {
            "type": "product",
            "id": "product",
            "label": "Product"
          }
        ]
      }],
  "presets": [
    {
      "name": "Main product"
    }
  ]
}
{% endschema %}
